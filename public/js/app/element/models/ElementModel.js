// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['framework/Model'], function(Model) {
    var ElementModel;
    return ElementModel = (function(_super) {

      __extends(ElementModel, _super);

      function ElementModel() {
        return ElementModel.__super__.constructor.apply(this, arguments);
      }

      ElementModel.prototype.defaults = {
        left: 100,
        top: 100,
        width: 'inherit',
        height: 'inherit',
        'z-index': 0
      };

      ElementModel.prototype.initialize = function(opts) {
        Model.prototype.initialize.call(this, opts);
        return this.aggregate();
      };

      ElementModel.prototype.aggregate = function() {
        return this.set('_itemDetails', this.getItemDetails());
      };

      ElementModel.prototype.getItemDetails = function() {
        var attributes, itemDetails, name, value;
        itemDetails = [];
        attributes = this.toJSON();
        for (name in attributes) {
          if (!__hasProp.call(attributes, name)) continue;
          value = attributes[name];
          if (name.indexOf('_') === -1) {
            itemDetails.push({
              name: name,
              value: value
            });
          }
        }
        return itemDetails;
      };

      ElementModel.prototype.setAsSelected = function() {
        this.collection.resetSelections();
        this.set('_selected', true);
        return this.aggregate();
      };

      return ElementModel;

    })(Model);
  });

}).call(this);
